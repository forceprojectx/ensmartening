esphome:
  name: sunny-exercise-bike
  friendly_name: Sunny Exercise Bike
#  wakeup_pin: GPIO33  # Your reed switch pin
#  wakeup_pin_mode: KEEP_PULLUP


esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:




wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password



globals:
  - id: last_pulse_time
    type: unsigned long
    restore_value: no
    initial_value: '0'

  - id: rpm
    type: float
    restore_value: no
    initial_value: '0'

  - id: step_count
    type: unsigned int
    restore_value: no
    initial_value: '0'

  - id: kilometer_estimate
    type: float
    restore_value: no
    initial_value: '0'

number:
  - platform: template
    name: "RPM Timeout (ms)"
    id: rpm_timeout_number
    optimistic: true
    min_value: 1000
    max_value: 10000
    step: 500
    unit_of_measurement: "ms"
    initial_value: 2000

  - platform: template
    name: "Sleep Timeout (ms)"
    id: sleep_timeout
    optimistic: true
    min_value: 11000
    max_value: 100000
    step: 500
    unit_of_measurement: "ms"
    initial_value: 30000

output:
  - platform: gpio
    pin: GPIO27
    id: pulse_output

#deep_sleep:
#  run_duration: 0s  # Not used here
#  sleep_duration: 0s  # We'll trigger manually
#  id: deep_sleep_ctrl

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO33
      mode:
        input: true
        pullup: true
    name: "Reed Switch"
    internal: true  # <-- This hides the sensor from Home Assistant
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      then:
        - lambda: |-
            unsigned long now = millis();
            if (id(last_pulse_time) > 0) {
              unsigned long delta = now - id(last_pulse_time);
              if (delta > 100) {
                float rev_per_min = 60000.0 / delta;
                id(rpm) = rev_per_min;
              }
            }
            id(last_pulse_time) = now;
            id(step_count) += 1;
        - output.turn_on: pulse_output

    on_release:
      then:
        - output.turn_off: pulse_output

sensor:
  - platform: template
    name: "Exercise Bike RPM"
    unit_of_measurement: "rpm"
    accuracy_decimals: 1
    lambda: |-
      unsigned long now = millis();
      if (now - id(last_pulse_time) > (unsigned long) id(rpm_timeout_number).state) {
        id(rpm) = 0.0;
        id(step_count) = 0;
        id(last_pulse_time) = now;
      }
      return id(rpm);
    update_interval: 1s
    filters:
      - delta: 0.1  # Only publish if change is >= 0.1

  - platform: template
    name: "Kilometer Estimate"
    unit_of_measurement: "km"
    accuracy_decimals: 2
    lambda: |-
      return (float)id(step_count) / 1500.0;
    update_interval: 10s
    filters:
      - delta: 0.01  # Only publish if change is >= 0.01
      

  - platform: template
    name: "Steps"
    unit_of_measurement: "steps"
    accuracy_decimals: 0
    lambda: |-
      return id(step_count);
    update_interval: 10s
    filters:
      - delta: 1  # Only publish if change is >= 1

#  - platform: adc
#    pin: GPIO35  # Replace with your ADC pin
#    id: battery_voltage_raw
#    name: "Battery Voltage Raw"
#    update_interval: 60s
#    filters:
#      - multiply: 1 # use 3.3 to Convert ADC reading (0-1) to voltage (0-3.3V)
  
#  - platform: template
#    name: "Battery Voltage"
#    unit_of_measurement: "V"
#    accuracy_decimals: 2
#    lambda: |-
#      const float voltage_divider_ratio = 1.51;  // Calculated for 5.1k and 10k resistors
#      return id(battery_voltage_raw) * voltage_divider_ratio;
#    update_interval: 60s

#interval:
#  - interval: 1s
#    then:
#      - lambda: |-
#          unsigned long now = millis();
#          if (now - id(last_pulse_time) > (unsigned long) id(sleep_timeout)) {
#            ESP_LOGI("main", "No pulse detected â€” entering deep sleep");
#            id(deep_sleep_ctrl).begin();  // this will sleep cleanly
#          }